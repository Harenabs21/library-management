openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22049
servers:
  - url: https://library.com
tags:
  - name: Books
    description: request about books
  - name: Authors
    description: request about authors
  - name: Topics
    description: request about topics
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateMin
          description: first parameter for the filtering
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateMax
          description: second parameter for the filtering
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          required: false
          schema:
            type: integer
          example: 1
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
          example: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    delete:
      tags:
        - Books
      summary: Delete a books
      description: Delete one /books/ with given id
      parameters:
        - name: id
          in: query
          description: given id for the delete operation
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted successfully
        '500':
          description: internal server error
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/authors:
    put:
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        '200':
          description: list of updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /authors/page/{page}/size/{pageSize}:
    get:
      tags:
        - Authors
      summary: Get the authors
      description: The list of all authors
      parameters:
        - in: path
          name: page
          required: true
          schema:
            type: integer
          example: 1
        - in: path
          name: pageSize
          required: true
          schema:
            type: integer
          example: 50
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/authors'
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      tags:
        - Authors
      summary: Get the authors
      description: The list of all authors
      parameters:
        - name: authorName
          in: query
          description: Filter the author by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/authors'
    put:
      tags:
        - Authors
      summary: Update author
      description: Update partially or totally the author's information
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/authors'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/authors'
    delete:
      tags:
        - Authors
      summary: Delete a author
      description: Delete one or many author with list of id
      parameters:
        - name: listOfId
          in: query
          description: given id for the delete operation
          required: true
          schema:
            type: array
            items:
              type: integer
      responses:
        '200':
          description: Deleted successfully
        '500':
          description: internal server error
  /topics:
    get:
      tags:
        - Topics
      summary: Get all topics
      description: Filter the topics with or without the topic name
      parameters:
        - in: query
          name: topicName
          required: false
          schema:
            type: string
      responses:
        '200':
          description: success operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topics'
    put:
      tags:
        - Topics
      summary: update a topic
      requestBody:
        content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Topics'
      responses:
        '200':
          description: succes operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topics'
    delete:
      tags:
        - Topics
      summary: Delete a topic
      parameters:
        - in: query
          name: topicId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: succes operation
        '500':
          description: internal server error
  /topics/{topicId}:
    put:
      tags:
        - Topics
      parameters:
        - in: path
          name: topicId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: succes operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topics'
components:
  schemas:
    authors:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    CrupdateBook:
      type: object
      properties:
        id:
          type: integer
        bookName:
          type: string
        pageNumbers: 
          type: integer
        topic:
          $ref: '#/components/schemas/Topics'
        releaseDate:
          type: string
          format: date
    Book:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - type: object
      properties:
        author:
          $ref: "#/components/schemas/authors"
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: integer
      required:
        - bookId
        - authorId
    Topics:
      type: object
      properties:
        id:
          type: string
        topicName:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
      required:
        - id